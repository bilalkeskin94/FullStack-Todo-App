{"version":3,"sources":["components/Header.js","actions.js","components/AddTodo.js","constants.js","components/Todo.js","components/ListTodos.js","reducer.js","store.js","App.js","serviceWorker.js","index.js"],"names":["Header","React","Component","axios","defaults","baseURL","AddTodo","props","handleSubmit","bind","handleClick","e","key","this","addTodo","target","value","onKeyPress","onClick","connect","text","dispatch","post","then","res","type","payload","data","catch","error","console","log","Todo","handleDelete","handleComplete","deleteTodo","todo","_id","completeTodo","className","isCompleted","todoId","ListTodos","getTodos","todos","map","state","get","err","initialState","loading","store","createStore","action","filter","applyMiddleware","thunk","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.8b6cf136.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Header extends React.Component {\n  render() {\n    return <h2>Getir TodoList TaskÄ±</h2>;\n  }\n}\n\nexport default Header;\n","import axios from \"axios\";\r\nimport {\r\n  ADD_TODO,\r\n  GET_TODOS,\r\n  LOAD_TODOS,\r\n  DELETE_TODO,\r\n  COMPLETE_TODO,\r\n} from \"./constants\";\r\n\r\naxios.defaults.baseURL = \"http://localhost:5000/api\";\r\n\r\nexport const getTodos = () => (dispatch) => {\r\n  dispatch({ type: LOAD_TODOS });\r\n\r\n  axios\r\n    .get(\"/todos\")\r\n    .then((res) =>\r\n      dispatch({\r\n        type: GET_TODOS,\r\n        payload: res.data,\r\n      })\r\n    )\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nexport const addTodo = (text) => (dispatch) => {\r\n  axios\r\n    .post(\"/todos\", { text: text })\r\n    .then((res) =>\r\n      dispatch({\r\n        type: ADD_TODO,\r\n        payload: res.data,\r\n      })\r\n    )\r\n    .catch((error) => console.log(error));\r\n};\r\n\r\nexport const deleteTodo = (todoId) => (dispatch) => {\r\n  axios\r\n    .post(`/todos/${todoId}`)\r\n    .then((res) =>\r\n      dispatch({\r\n        type: DELETE_TODO,\r\n        payload: res.data.todoId,\r\n      })\r\n    )\r\n    .catch((error) => console.log(error));\r\n};\r\n\r\nexport const completeTodo = (todoId) => (dispatch) => {\r\n  axios\r\n    .post(`/todos/${todoId}/complete`)\r\n    .then((res) =>\r\n      dispatch({\r\n        type: COMPLETE_TODO,\r\n        payload: res.data.todoId,\r\n      })\r\n    )\r\n    .catch((error) => console.log(error));\r\n};\r\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { addTodo } from \"../actions\";\nclass AddTodo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleSubmit(e) {\n    if (e.key === \"Enter\") {\n      this.props.addTodo(e.target.value);\n      e.target.value = \"\";\n    }\n  }\n  handleClick(e) {\n    if (e.key === \"click\") {\n      this.props.addTodo(e.target.value);\n      e.target.value = \"\";\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <input onKeyPress={this.handleSubmit} />\n        <button onClick={this.handleClick}>Add Todo</button>\n      </div>\n    );\n  }\n}\nexport default connect(null, { addTodo })(AddTodo);\n","export const ADD_TODO = \"ADD_TODO\";\r\nexport const DELETE_TODO = \"DELETE_TODO\";\r\nexport const GET_TODOS = \"GET_TODOS\";\r\nexport const LOAD_TODOS = \"LOAD_TODOS\";\r\nexport const COMPLETE_TODO = \"COMPLETE_TODO\";\r\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { deleteTodo, completeTodo } from \"../actions\";\n\nclass Todo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleDelete = this.handleDelete.bind(this);\n    this.handleComplete = this.handleComplete.bind(this);\n  }\n\n  handleDelete() {\n    this.props.deleteTodo(this.props.todo._id);\n  }\n\n  handleComplete() {\n    this.props.completeTodo(this.props.todo._id);\n  }\n  render() {\n    const { todo } = this.props;\n    return (\n      <li className={todo.isCompleted ? \"checked\" : \"\"}>\n        <span onClick={this.handleComplete}>{todo.text}</span>\n        <span onClick={this.handleDelete} className=\"close\">\n          &#10799;\n        </span>\n      </li>\n    );\n  }\n}\n\nexport default connect(null, { deleteTodo, completeTodo })(Todo);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { getTodos } from \"../actions\";\nimport Todo from \"./Todo\";\nclass ListTodos extends React.Component {\n  componentDidMount() {\n    this.props.getTodos();\n  }\n  render() {\n    const { todos } = this.props;\n    return (\n      <ul>\n        {todos.map((todo) => (\n          <Todo key={todo._id} todo={todo} />\n        ))}\n      </ul>\n    );\n  }\n}\nconst mapStateToProps = (state) => ({\n  todos: state.todos,\n});\nexport default connect(mapStateToProps, { getTodos })(ListTodos);\n","import {\n  ADD_TODO,\n  GET_TODOS,\n  DELETE_TODO,\n  LOAD_TODOS,\n  COMPLETE_TODO,\n} from \"./constants\";\n\nconst initialState = {\n  loading: false,\n  todos: [],\n};\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case GET_TODOS:\n      return {\n        ...state,\n        loading: false,\n        todos: action.payload,\n      };\n\n    case ADD_TODO:\n      return {\n        ...state,\n        todos: [action.payload, ...state.todos],\n      };\n    case DELETE_TODO:\n      return {\n        ...state,\n        todos: state.todos.filter((todo) => todo._id !== action.payload),\n      };\n\n    case COMPLETE_TODO:\n      return {\n        ...state,\n        todos: state.todos.map((todo) => {\n          if (todo._id === action.payload)\n            return {\n              ...todo,\n              isCompleted: !todo.isCompleted,\n            };\n          return todo;\n        }),\n      };\n    case LOAD_TODOS:\n      return {\n        ...state,\n        loading: true,\n      };\n    default:\n      return state;\n  }\n}\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport reducer from \"./reducer\";\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nexport default store;\n//redux store\n","import React, { Component } from \"react\";\nimport Header from \"./components/Header\";\nimport AddTodo from \"./components/AddTodo\";\nimport ListTodos from \"./components/ListTodos\";\n\nimport { Provider } from \"react-redux\";\n\nimport store from \"./store\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"app\">\n          <div className=\"header\">\n            <Header />\n            <AddTodo />\n          </div>\n          <ListTodos />\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}