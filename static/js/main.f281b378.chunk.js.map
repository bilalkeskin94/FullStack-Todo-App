{"version":3,"sources":["components/Header.js","actions.js","components/AddTodo.js","constants.js","components/Todo.js","components/ListTodos.js","reducer.js","store.js","App.js","serviceWorker.js","index.js"],"names":["Header","React","Component","axios","defaults","baseURL","AddTodo","props","handleSubmit","bind","e","key","this","addTodo","target","value","onKeyPress","connect","text","dispatch","post","then","res","type","payload","data","catch","error","console","log","Todo","handleDelete","handleComplete","deleteTodo","todo","_id","completeTodo","className","isCompleted","onClick","todoId","ListTodos","getTodos","todos","map","state","get","err","initialState","loading","store","createStore","action","filter","applyMiddleware","thunk","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f281b378.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Header extends React.Component {\r\n  render() {\r\n    return <h2>Getir TodoList TaskÄ±</h2>;\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import axios from \"axios\";\r\nimport {\r\n  ADD_TODO,\r\n  GET_TODOS,\r\n  LOAD_TODOS,\r\n  DELETE_TODO,\r\n  COMPLETE_TODO,\r\n} from \"./constants\";\r\n\r\naxios.defaults.baseURL = \"http://localhost:5000/api\";\r\n\r\nexport const getTodos = () => (dispatch) => {\r\n  dispatch({ type: LOAD_TODOS });\r\n\r\n  axios\r\n    .get(\"/todos\")\r\n    .then((res) =>\r\n      dispatch({\r\n        type: GET_TODOS,\r\n        payload: res.data,\r\n      })\r\n    )\r\n    .catch((err) => console.log(err));\r\n};\r\n\r\nexport const addTodo = (text) => (dispatch) => {\r\n  axios\r\n    .post(\"/todos\", { text: text })\r\n    .then((res) =>\r\n      dispatch({\r\n        type: ADD_TODO,\r\n        payload: res.data,\r\n      })\r\n    )\r\n    .catch((error) => console.log(error));\r\n};\r\n\r\nexport const deleteTodo = (todoId) => (dispatch) => {\r\n  axios\r\n    .post(`/todos/${todoId}`)\r\n    .then((res) =>\r\n      dispatch({\r\n        type: DELETE_TODO,\r\n        payload: res.data.todoId,\r\n      })\r\n    )\r\n    .catch((error) => console.log(error));\r\n};\r\n\r\nexport const completeTodo = (todoId) => (dispatch) => {\r\n  axios\r\n    .post(`/todos/${todoId}/complete`)\r\n    .then((res) =>\r\n      dispatch({\r\n        type: COMPLETE_TODO,\r\n        payload: res.data.todoId,\r\n      })\r\n    )\r\n    .catch((error) => console.log(error));\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { addTodo } from \"../actions\";\r\nclass AddTodo extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n  handleSubmit(e) {\r\n    if (e.key === \"Enter\") {\r\n      this.props.addTodo(e.target.value);\r\n      e.target.value = \"\";\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <input onKeyPress={this.handleSubmit} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default connect(null, { addTodo })(AddTodo);\r\n","export const ADD_TODO = \"ADD_TODO\";\r\nexport const DELETE_TODO = \"DELETE_TODO\";\r\nexport const GET_TODOS = \"GET_TODOS\";\r\nexport const LOAD_TODOS = \"LOAD_TODOS\";\r\nexport const COMPLETE_TODO = \"COMPLETE_TODO\";\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { deleteTodo, completeTodo } from \"../actions\";\r\n\r\nclass Todo extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleDelete = this.handleDelete.bind(this);\r\n    this.handleComplete = this.handleComplete.bind(this);\r\n  }\r\n\r\n  handleDelete() {\r\n    this.props.deleteTodo(this.props.todo._id);\r\n  }\r\n\r\n  handleComplete() {\r\n    this.props.completeTodo(this.props.todo._id);\r\n  }\r\n  render() {\r\n    const { todo } = this.props;\r\n    return (\r\n      <li className={todo.isCompleted ? \"checked\" : \"\"}>\r\n        <span onClick={this.handleComplete}>{todo.text}</span>\r\n        <span onClick={this.handleDelete} className=\"close\">\r\n          &#10799;\r\n        </span>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(null, { deleteTodo, completeTodo })(Todo);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { getTodos } from \"../actions\";\r\nimport Todo from \"./Todo\";\r\nclass ListTodos extends React.Component {\r\n  componentDidMount() {\r\n    this.props.getTodos();\r\n  }\r\n  render() {\r\n    const { todos } = this.props;\r\n    return (\r\n      <ul>\r\n        {todos.map((todo) => (\r\n          <Todo key={todo._id} todo={todo} />\r\n        ))}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => ({\r\n  todos: state.todos,\r\n});\r\nexport default connect(mapStateToProps, { getTodos })(ListTodos);\r\n","import {\r\n  ADD_TODO,\r\n  GET_TODOS,\r\n  DELETE_TODO,\r\n  LOAD_TODOS,\r\n  COMPLETE_TODO,\r\n} from \"./constants\";\r\n\r\nconst initialState = {\r\n  loading: false,\r\n  todos: [],\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_TODOS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        todos: action.payload,\r\n      };\r\n\r\n    case ADD_TODO:\r\n      return {\r\n        ...state,\r\n        todos: [action.payload, ...state.todos],\r\n      };\r\n    case DELETE_TODO:\r\n      return {\r\n        ...state,\r\n        todos: state.todos.filter((todo) => todo._id !== action.payload),\r\n      };\r\n\r\n    case COMPLETE_TODO:\r\n      return {\r\n        ...state,\r\n        todos: state.todos.map((todo) => {\r\n          if (todo._id === action.payload)\r\n            return {\r\n              ...todo,\r\n              isCompleted: !todo.isCompleted,\r\n            };\r\n          return todo;\r\n        }),\r\n      };\r\n    case LOAD_TODOS:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport reducer from \"./reducer\";\r\n\r\nconst store = createStore(reducer, applyMiddleware(thunk));\r\n\r\nexport default store;\r\n//redux store\r\n","import React, { Component } from \"react\";\r\nimport Header from \"./components/Header\";\r\nimport AddTodo from \"./components/AddTodo\";\r\nimport ListTodos from \"./components/ListTodos\";\r\n\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport store from \"./store\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Provider store={store}>\r\n        <div className=\"app\">\r\n          <div className=\"header\">\r\n            <Header />\r\n            <AddTodo />\r\n          </div>\r\n          <ListTodos />\r\n        </div>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}